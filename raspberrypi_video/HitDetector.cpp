#include "HitDetector.h"

#include "opencv2\opencv.hpp"
#include "opencv2\bgsegm.hpp" //for MOG

using namespace cv;

// global variables
Ptr<BackgroundSubtractor> pMOG; //MOG Background subtractor
Ptr<BackgroundSubtractor> pMOG2; //MOG2 Background subtractor
Ptr<SimpleBlobDetector> blobDetector;

HitDetector() {	
	//create background subtractor objects
	pMOG = createBackgroundSubtractorMOG(); //MOG approach
	pMOG2 = createBackgroundSubtractorMOG2(); //MOG2 approach	
	
	//create GUI windows
	namedWindow("FG Mask MOG");
	namedWindow("FG Mask MOG 2");
	namedWindow("keypoints");
	
	//create blob detector objects
	blobDetector = new SimpleBlobDetector();
}

~HitDetector() {
}

void detectHit(Mat img) {
	
	Mat foregroundImg = backgroundSubtract(img);
	blobDetect(foregroundImg);
	
}

Mat backgroundSubtract(Mat inputImg) {
	
	Mat fgMaskMOG; //fg mask generated by MOG method
	Mat fgMaskMOG2; //fg mask fg mask generated by MOG2 method
	
	if(!inputImg.data) {
		std::cerr << "Unable to open first image frame " << endl;
		exit(EXIT_FAILURE);
	}
	
	//update the background model
    pMOG->apply(frame, fgMaskMOG);
    pMOG2->apply(frame, fgMaskMOG2);
	
	//show the current frame and the fg masks
    imshow("FG Mask MOG", fgMaskMOG);
    imshow("FG Mask MOG 2", fgMaskMOG2);
	
	//return one of the two method results
	return fgMaskMOG;
	
}

void blobDetect(Mat image) {
	
	// Detect blobs.
	std::vector<KeyPoint> keypoints;
	blobDetector.detect(img, keypoints);
	 
	// Draw detected blobs as red circles.
	// DrawMatchesFlags::DRAW_RICH_KEYPOINTS flag ensures the size of the circle corresponds to the size of blob
	Mat im_with_keypoints;
	drawKeypoints(img, keypoints, im_with_keypoints, Scalar(0,0,255), DrawMatchesFlags::DRAW_RICH_KEYPOINTS);
	 
	// Show blobs
	imshow("keypoints", im_with_keypoints);
	waitKey(0);
	
}